#
# MIT License
#
# (C) Copyright 2020-2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
openapi: "3.0.2"

info:
  title: "Configuration Framework Service"
  version: "0000.0000.0000"
  description: >
    The Configuration Framework Service (CFS) manages the launch of Ansible Execution Environments
    for image customization, node personalization, and node reconfiguration. CFS manages
    the Ansible staging container that pulls Ansible play/role content and inventory (optional)
    from the git server and launches the Ansible Execution Environment.


    CFS includes the following components:

      * CFS REST API
      * A Kubernetes operator running on the management services infrastructure to handle
      the lifecycle and reporting of configuration sessions.
      * Pre-packaged Ansible Execution Environment(s) (AEE) with values tuned for performant
      configuration for executing Ansible playbooks against Cray compute and user access nodes.


    CFS uses a Git version control server running in the management services infrastructure
    for management of the configuration manifest lifecycle.


      The CFS API allows an administrator to customize the compute and user access nodes
      in the following ways:
    * Customize the bootable images prior to their use on the system. This process is called
      image customization. CFS uses IMS to stage images in an ssh container and then modifies
      one or more images using Ansible.

    * Customize live nodes during boot or post-boot. This process is called node personalization.
      Node personalization involves applying software and/or configuration that differentiates
      a node or a group of nodes from all other groups of nodes.
      This should be used in scenarios where configuration cannot be applied prior to booting
      a node. It is typically best to make changes pre-boot via image customization. This ensures
      Ansible only has to run once against an image, rather than against every individual booted node.
      The BOS and IMS APIs support CFS to customize live nodes during boot time.

    ## Resources

    /healthz - Check service health


    /options - Updates service options.


    /sessions - Create, retrieve, or delete configuration sessions.


    /components - Add, update, retrieve, or delete component information.


    /configurations - Add, update, retrieve or delete desired configuration states.


    /sources - Add, update, retrieve, or delete playbook source information. (v3 api only)

    ## Workflows

    ### Image Customization

     #### GET /images

     Identify the IMS image that you want to customize. Note the id of the image that you want to customize.

     #### POST /sessions

     Create a configuration session and push the configuration to the specific image in IMS.
     You must specify the target definition as image and provide id of the image that you want to customize.
     This step customizes the image as per Ansible playbook and saves the image in the IMS.


    ### Node Personalization

     #### POST /sessions
     Create a configuration framework session to push configuration to nodes that have already
     been booted, specifying the target (optional), the git repository location, inventory (optional),
     and gives the session a unique name.

     #### GET /sessions/{session_name}
     View details and status for the specific session_name.

     #### DELETE /sessions/{session_name}
     Delete all session history for session_name (as needed).

    The default content type for the CFS API is `application/json`. Unsuccessful
    API calls return a content type of `application/problem+json` as per RFC 7807.

servers:
- url: https://api-gw-service-nmn.local/apis/cfs
  description: The production CFS API server

components:
  requestBodies:
    V2SessionCreateRequest:
      description: A JSON object for creating Config Framework Sessions
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionCreate'
    V3SessionCreateRequest:
      description: A JSON object for creating Config Framework Sessions
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SessionCreate'
    V2OptionsUpdateRequest:
      description: Service-wide configuration options
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V3OptionsUpdateRequest:
      description: Service-wide configuration options
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3Options'
    V2ComponentsUpdateRequest:
      description: The configuration/state for an array of components
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V2ComponentsUpdate'
              - $ref: '#/components/schemas/V2ComponentStateArray'
    V3ComponentsUpdateRequest:
      description: The configuration/state for an array of components
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V3ComponentsUpdate'
              - $ref: '#/components/schemas/V3ComponentDataArray'
    V2ComponentUpdateRequest:
      description: The configuration/state for a single component
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentState'
    V3ComponentUpdateRequest:
      description: The configuration/state for a single component
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ComponentData'
    V2ConfigurationUpdateRequest:
      description: A desired configuration state
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Configuration'
    V3ConfigurationUpdateRequest:
      description: A desired configuration state
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ConfigurationData'
    V3SourceCreateRequest:
      description: A source
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SourceCreateData'
    V3SourceUpdateRequest:
      description: A source
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SourceUpdateData'
  responses:
    # Success
    Version:
      description: Version information for the service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
    Healthz:
      description: Status information for the service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Healthz'
    V2Options:
      description: A collection of service-wide configuration options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V3Options:
      description: A collection of service-wide configuration options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3Options'
    V2SessionDetails:
      description: A single configuration session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Session'
    V3SessionData:
      description: A single configuration session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SessionData'
    V2SessionDetailsArray:
      description: A collection of configuration sessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionArray'
    V3SessionDataCollection:
      description: A collection of configuration sessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SessionDataCollection'
    V3SessionIdCollection:
      description: A collection of configuration sessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SessionIdCollection'
    V2ComponentDetails:
      description: A single component state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentState'
    V3ComponentData:
      description: A single component state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ComponentData'
    V2ComponentDetailsArray:
      description: A collection of component states
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentStateArray'
    V3ComponentDataCollection:
      description: A collection of component states
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ComponentDataCollection'
    V3ComponentIdCollection:
      description: A collection of component ids
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ComponentIdCollection'
    V2ConfigurationDetails:
      description: A single configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Configuration'
    V3ConfigurationData:
      description: A single configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ConfigurationData'
    V2ConfigurationDetailsArray:
      description: A collection of configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ConfigurationArray'
    V3ConfigurationDataCollection:
      description: A collection of configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3ConfigurationDataCollection'
    V3SourceData:
      description: A single source
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SourceData'
    V3SourceDataCollection:
      description: A collection of sources
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V3SourceDataCollection'
    ResourceDeleted:
      description: The resource was deleted.
    # Errors
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ResourceNotFound:
      description: The resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ConflictingSessionName:
      description: A session with the same name already exists.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ConflictingSourceName:
      description: A source with the same name already exists
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    Version:
      description: Version data
      type: object
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
      additionalProperties: false
    Healthz:
      description: Service health status
      type: object
      properties:
        db_status:
          type: string
        kafka_status:
          type: string
      additionalProperties: false
    V3NextData:
      description: Information for requesting the next page of data
      type: object
      properties:
        limit:
          type: integer
        after_id:
          type: string
      additionalProperties: true  # This can contain the parameters of any endpoint this is returned from
    ## OPTIONS ENDPOINT ##
    V2Options:
      description: |
        Configuration options for the configuration service.
      type: object
      properties:
        hardwareSyncInterval:
          type: integer
          description: How frequently the CFS hardware-sync-agent checks with the Hardware State Manager to update its known hardware (in seconds)
          example: 5
        batcherCheckInterval:
          type: integer
          description: How frequently the batcher checks the configuration states to see if work needs to be done (in seconds)
          example: 5
        batchSize:
          type: integer
          description: The maximum number of nodes the batcher will run a single CFS session against.
          example: 120
        batchWindow:
          type: integer
          description: The maximum number of seconds the batcher will wait to run a CFS session once a node has been detected that needs configuration.
          example: 120
        defaultBatcherRetryPolicy:
          type: integer
          description: The default maximum number retries per node when configuration fails.
          example: 1
        defaultPlaybook:
          type: string
          description: The default playbook to be used if not specified in a node's desired state.
          example: site.yml
          pattern: '^[^\s;]*$'
        defaultAnsibleConfig:
          type: string
          description: The Kubernetes ConfigMap which holds the default ansible.cfg for a given CFS session. This ConfigMap must be present in the same Kubernetes namespace as the CFS service.
          example: cfs-default-ansible-cfg
        sessionTTL:
          type: string
          description: A time-to-live applied to all completed CFS sessions.  Specified in hours or days. e.g. 3d or 24h.  Set to an empty string to disable.
          example: 24h
        additionalInventoryUrl:
          type: string
          description: >
            The git clone URL of a repo with additional inventory files.  All files in the repo will be copied into the hosts directory of CFS.
          example: https://api-gw-service-nmn.local/vcs/cray/inventory.git
          pattern: '^[^\s;]*$'
        batcherMaxBackoff:
          type: integer
          description: >
            The maximum number of seconds that batcher will backoff from session creation if problems are detected.
          example: 3600
        batcherDisable:
          type: boolean
          description: Disables cfs-batcher's automatic session creation if set to True.
        batcherPendingTimeout:
          type: integer
          description: How long cfs-batcher will wait on a pending session before deleting and recreating it (in seconds).
        loggingLevel:
          type: string
          description: The logging level for core CFS services.  This does not affect the Ansible logging level.
      additionalProperties: false
    V3Options:
      description: |
        Configuration options for the configuration service.
      type: object
      properties:
        hardware_sync_interval:
          type: integer
          description: How frequently the CFS hardware-sync-agent checks with the Hardware State Manager to update its known hardware (in seconds)
          example: 5
          minimum: 1
        batcher_check_interval:
          type: integer
          description: How frequently the batcher checks the configuration states to see if work needs to be done (in seconds)
          example: 5
          minimum: 1
        batch_size:
          type: integer
          description: The maximum number of nodes the batcher will run a single CFS session against.
          example: 120
          minimum: 1
        batch_window:
          type: integer
          description: The maximum number of seconds the batcher will wait to run a CFS session once a node has been detected that needs configuration.
          example: 120
          minimum: 0
        default_batcher_retry_policy:
          type: integer
          description: The default maximum number retries per node when configuration fails.
          example: 1
          minimum: 0
        default_playbook:
          type: string
          description: >
            [DEPRECATED] The default playbook to be used if not specified in a node's desired state.
            This option is read-only via the v3 API and remains only for compatibility with the v2 API.
            This option will be removed from v3 when the v2 API is removed.
          example: site.yml
          pattern: '^[^\s;]*$'
          deprecated: true
          readOnly: true
        default_ansible_config:
          type: string
          description: The Kubernetes ConfigMap which holds the default ansible.cfg for a given CFS session. This ConfigMap must be present in the same Kubernetes namespace as the CFS service.
          example: cfs-default-ansible-cfg
          minLength: 0
          maxLength: 60
        session_ttl:
          type: string
          description: A time-to-live applied to all completed CFS sessions.  Specified in hours or days. e.g. 3d or 24h.  Set to an empty string to disable.
          example: 24h
          minLength: 0
          maxLength: 10
        additional_inventory_url:
          type: string
          description: >
            The git clone URL of a repo with additional inventory files.  All files in the repo will be copied into the hosts directory of CFS.
            This is mutually exclusive with the additional_inventory_source option and only one can be set.
          example: https://api-gw-service-nmn.local/vcs/cray/inventory.git
          pattern: '^[^\s;]*$'
          minLength: 0
          maxLength: 240
        additional_inventory_source:
          type: string
          description: >
            A CFS source with additional inventory files.  All files in the repo will be copied into the hosts directory of CFS.
            This is mutually exclusive with the additional_source_url option and only one can be set.
          example: example-source
          minLength: 0
          maxLength: 60
        batcher_max_backoff:
          type: integer
          description: >
            The maximum number of seconds that batcher will backoff from session creation if problems are detected.
          example: 3600
          minimum: 0
        batcher_disable:
          type: boolean
          description: Disables cfs-batcher's automatic session creation if set to True.
        batcher_pending_timeout:
          type: integer
          description: How long cfs-batcher will wait on a pending session before deleting and recreating it (in seconds).
          minimum: 1
        logging_level:
          type: string
          description: The logging level for core CFS services.  This does not affect the Ansible logging level.
          enum: ['DEBUG', 'INFO', 'WARNING', 'ERROR']
        default_page_size:
          type: integer
          description: The maximum number of results that a query will return if the limit parameter is not specified.
          minimum: 1
        debug_wait_time:
          type: integer
          description: The number of seconds CFS sessions will wait after failure for debugging when debug_on_failure is true.
          minimum: 0
        include_ara_links:
          type: boolean
          description: If true, session and component records will include links to ARA dashboards for the logs
      additionalProperties: false
    ## SESSIONS ENDPOINT ##
    SessionTargetSection:
      type: object
      description: >
           A target lets you define the nodes or images that you want to customize and consists
           of two sub-parameters - Definition and groups.
           By default, Configuration Framework Sessions use dynamic inventory definition
           to target hosts. When using a session to customize an image, or if a static inventory
           is required, use this optional section to specify entities (whether images or nodes)
           for the session to target.
      properties:
        definition:
          type: string
          description: |
            Source of inventory definition to be used in the configuration session.

            'image' denotes that the session will target an image root through the Image
            Management Service (IMS). Group members should be a single image identifier known by IMS.

            'spec' denotes inventory that is specified directly via CFS in the target
            groups/members of this object. You can include a node name (a DNS resolvable name),
            or a group name and a list of nodes. The command line inventory can be a quick
            and simple way to run Ansible against a small subset of nodes. However, if more
            customization of the inventory is needed, specifically customization of host and
            groups variables, the repo target definition should be used.

            'repo' denotes the inventory will be used from the git repository
            specified for this session (via `cloneUrl`, and `branch` or `commit`). The inventory
            must be located in the "hosts" file at the root of the repository.

            'dynamic' (default) will use the CFS-provided dynamic inventory plugin to define
            the inventory. The hosts file is automatically generated by CFS with data from
            the Hardware State Manager (HSM), which includes groups and hardware roles.
          enum: ['image', 'spec', 'repo', 'dynamic']
          default: 'dynamic'
          example: spec
        groups:
          type: array
          description: Specification of the groups and group members per the inventory definition. This list is not valid for the 'repo' and 'dynamic' inventory definition types. Multiple groups can be specified for 'image' and 'spec' inventory definition types.
          items:
            type: object
            required: ['name', 'members']
            properties:
              name:
                description: Group name
                example: test-computes
                type: string
              members:
                description: |
                  Group members for the inventory.
                type: array
                example: ['nid000001', 'nid000002', 'nid000003']
                items:
                  type: string
        image_map:
          type: array
          description: |
            Mapping of image IDs to resultant image names.  This is only valid for 'image' inventory definition types.
            Only images that are defined in 'groups' will result in a new image.
            If images in 'groups' are not specified here, CFS will generate a name for the resultant image.
          items:
            type: object
            required: ['source_id', 'result_name']
            properties:
              source_id:
                description: Source image id.  This is the image id that is used in 'groups'.
                example: ff287206-6ff7-4659-92ad-6e732821c6b4
                type: string
              result_name:
                description: Resultant image name.
                example: new-test-image
                type: string
    SessionConfigurationSection:
      type: object
      description: The configuration information which the session will apply
      properties:
        name:
          type: string
          description: The name of the CFS configuration to be applied
          example: example-config
        limit:
          type: string
          description: >-
            A comma separated list of layers in the configuration to limit the session to.
            This can be either a list of named layers, or a list of indices.
          example: layer1,layer3
    SessionAnsibleSection:
      type: object
      description: Additional options that will be used when invoking Ansible.
      properties:
        config:
          type: string
          default: cfs-default-ansible-cfg
          description: >-
            The Kubernetes ConfigMap which holds the ansible.cfg for a given CFS
            session. This ConfigMap must be present in the same Kubernetes namespace as
            the CFS service. If no value is given, the value of the defaultAnsibleConfig
            field in the /options endpoint will be used.
          example: cfs-default-ansible-cfg
        limit:
          type: string
          description: >-
            Additional filtering of hosts or groups from the inventory to run against. This is
            especially useful when running with dynamic inventory and when you want to run on a
            subset of nodes or groups. This option corresponds to ansible-playbook's --limit and
            can be used to specify nodes or groups.
          example: host1
          nullable: true
        verbosity:
          type: integer
          default: 0
          minimum: 0
          maximum: 4
          description: >-
            The verbose mode to use in the call to the ansible-playbook command. 1 = -v,
            2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help
            for more information.
        passthrough:
          type: string
          description: >-
            Additional parameters that are added to all Ansible calls for the session. This field is
            currently limited to the following Ansible parameters: "--extra-vars", "--forks",
            "--skip-tags", "--start-at-task", and "--tags". WARNING: Parameters passed to Ansible in
            this way should be used with caution.  State will not be recorded for components when
            using these flags to avoid incorrect reporting of partial playbook runs.
          nullable: true
    SessionStatusArtifactsSection:
      type: array
      description: Status of artifacts
      items:
        type: object
        properties:
          image_id:
            example: "f34ff35e-d782-4a65-a1b8-243a3cd740af"
            description: The IMS id of the original image to be customized via a configuration session.
            format: uuid
            type: string
          result_id:
            example: "8b782ccd-8706-4145-a6a1-724e29ed5522"
            description: The IMS id of the image that was customized via a configuration session. This is the resultant image of the customization.
            format: uuid
            type: string
          type:
            example: 'ims_customized_image'
            type: string
            enum: ['ims_customized_image']
    V2SessionStatusSessionSection:
      type: object
      description: Status of session
      properties:
        job:
          description: The name of the configuration execution environment associated with this session.
          example: cray-cfs-job-session-20190728032600
          readOnly: true
          type: string
        completionTime:
          description: The date/time when the session completed execution in RFC 3339 format. This has a null value when the session has not yet completed.
          nullable: true
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
          type: string
        startTime:
          description: The date/time when the session started execution in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
          type: string
        status:
          description: The execution status of the session.
          enum: ['pending', 'running', 'complete']
          readOnly: true
          type: string
        succeeded:
          description: |
            Whether the session executed successfully or not. A 'none'
            value denotes that the execution has not completed. This
            field has context when the `status` field is 'complete'.
            A session may successfully execute even if the underlying
            tasks do not.
          enum: ['none', 'true', 'false', 'unknown']
          readOnly: true
          type: string
    V3SessionStatusSessionSection:
      type: object
      description: Status of session
      properties:
        job:
          description: The name of the configuration execution environment associated with this session.
          example: cray-cfs-job-session-20190728032600
          type: string
        ims_job:
          description: The name os the IMS job associated with the session when running against an image.
          example: 5037edd8-e9c5-437d-b54b-db4a8ad2cb15
          type: string
        completion_time:
          description: The date/time when the session completed execution in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
          type: string
        start_time:
          description: The date/time when the session started execution in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
          type: string
        status:
          description: The execution status of the session.
          enum: ['pending', 'running', 'complete']
          readOnly: true
          type: string
        succeeded:
          description: |
            Whether the session executed successfully or not. A 'none'
            value denotes that the execution has not completed. This
            field has context when the `status` field is 'complete'.
            A session may successfully execute even if the underlying
            tasks do not.
          enum: ['none', 'true', 'false', 'unknown']
          readOnly: true
          type: string
    V2SessionStatusSection:
      type: object
      description: Status of artifacts, session, and targets. Lists details like session status, session start and completion time, number of successful, failed, or running targets. If the target definition is an image, it also lists the image_id, result_id, and type of image under Artifacts.
      properties:
        artifacts:
          $ref: '#/components/schemas/SessionStatusArtifactsSection'
        session:
          $ref: '#/components/schemas/V2SessionStatusSessionSection'
    V3SessionStatusSection:
      type: object
      description: Status of artifacts, session, and targets. Lists details like session status, session start and completion time, number of successful, failed, or running targets. If the target definition is an image, it also lists the image_id, result_id, and type of image under Artifacts.
      properties:
        artifacts:
          $ref: '#/components/schemas/SessionStatusArtifactsSection'
        session:
          $ref: '#/components/schemas/V3SessionStatusSessionSection'
    V2Session:
      description: |
        An execution session for the Configuration Framework.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configuration:
          $ref: '#/components/schemas/SessionConfigurationSection'
        ansible:
          $ref: '#/components/schemas/SessionAnsibleSection'
        target:
          $ref: '#/components/schemas/SessionTargetSection'
        status:
          $ref: '#/components/schemas/V2SessionStatusSection'
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
      additionalProperties: false
    V3SessionData:
      description: |
        An execution session for the Configuration Framework.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configuration:
          $ref: '#/components/schemas/SessionConfigurationSection'
        ansible:
          $ref: '#/components/schemas/SessionAnsibleSection'
        target:
          $ref: '#/components/schemas/SessionTargetSection'
        status:
          $ref: '#/components/schemas/V3SessionStatusSection'
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
        debug_on_failure:
          type: boolean
          description: >-
            When true, the ansible container for the session will remain running after an Ansible failure.  The
            container will remain running for a number of seconds specified by the debug_wait_time options, or until
            complete flag is touched.
          default: false
        logs:
          type: string
          description: The link to the ARA UI with logs for this component
          readOnly: true
      additionalProperties: false
    V2SessionCreate:
      description: |
        The information required to create a Config Framework Session.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configurationName:
          type: string
          description: The name of a CFS configuration to apply
          example: example-config
        configurationLimit:
          type: string
          description: >-
            A comma separated list of layers in the configuration to limit the session to.
            This can be either a list of named layers, or a list of indices.
          example: layer1,layer3
          default: ""
        ansibleLimit:
          type: string
          description: >-
            Additional filtering of hosts or groups from the inventory to run against. This is
            especially useful when running with dynamic inventory and when you want to run on a
            subset of nodes or groups. This option corresponds to ansible-playbook's --limit and
            can be used to specify nodes or groups.
          example: host1
          pattern: '^[^\s;]*$'
        ansibleConfig:
          type: string
          description: >-
            The Kubernetes ConfigMap which holds the ansible.cfg for a given CFS
            session. This ConfigMap must be present in the same Kubernetes namespace as
            the CFS service. If no value is given, the value of the defaultAnsibleConfig
            field in the /options endpoint will be used.
          example: cfs-default-ansible-cfg
        ansibleVerbosity:
          type: integer
          default: 0
          minimum: 0
          maximum: 4
          description: >-
            The verbose mode to use in the call to the ansible-playbook command. 1 = -v,
            2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help
            for more information.
        ansiblePassthrough:
          type: string
          description: >-
            Additional parameters that are added to all Ansible calls for the session. This field is
            currently limited to the following Ansible parameters: "--extra-vars", "--forks",
            "--skip-tags", "--start-at-task", and "--tags". WARNING: Parameters passed to Ansible in
            this way should be used with caution.  State will not be recorded for components when
            using these flags to avoid incorrect reporting of partial playbook runs.
        target:
          $ref: '#/components/schemas/SessionTargetSection'
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
      required: [name, configurationName]
      additionalProperties: false
    V3SessionCreate:
      description: |
        The information required to create a Config Framework Session.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configuration_name:
          type: string
          description: The name of a CFS configuration to apply
          example: example-config
          minLength: 1
          maxLength: 60
        configuration_limit:
          type: string
          description: >-
            A comma separated list of layers in the configuration to limit the session to.
            This can be either a list of named layers, or a list of indices.
          example: layer1,layer3
          default: ""
        ansible_limit:
          type: string
          description: >-
            Additional filtering of hosts or groups from the inventory to run against. This is
            especially useful when running with dynamic inventory and when you want to run on a
            subset of nodes or groups. This option corresponds to ansible-playbook's --limit and
            can be used to specify nodes or groups.
          example: host1
          pattern: '^[^\s;]*$'
          default: ""
        ansible_config:
          type: string
          description: >-
            The Kubernetes ConfigMap which holds the ansible.cfg for a given CFS
            session. This ConfigMap must be present in the same Kubernetes namespace as
            the CFS service. If no value is given, the value of the defaultAnsibleConfig
            field in the /options endpoint will be used.
          example: cfs-default-ansible-cfg
        ansible_verbosity:
          type: integer
          default: 0
          minimum: 0
          maximum: 4
          description: >-
            The verbose mode to use in the call to the ansible-playbook command. 1 = -v,
            2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help
            for more information.
        ansible_passthrough:
          type: string
          description: >-
            Additional parameters that are added to all Ansible calls for the session. This field is
            currently limited to the following Ansible parameters: "--extra-vars", "--forks",
            "--skip-tags", "--start-at-task", and "--tags". WARNING: Parameters passed to Ansible in
            this way should be used with caution.  State will not be recorded for components when
            using these flags to avoid incorrect reporting of partial playbook runs.
          default: ""
        target:
          $ref: '#/components/schemas/SessionTargetSection'
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
        debug_on_failure:
          type: boolean
          description: >-
            When true, the ansible container for the session will remain running after an Ansible failure.  The
            container will remain running for a number of seconds specified by the debug_wait_time options, or until
            complete flag is touched.
          default: false
      required: [name, configuration_name]
      additionalProperties: false
    V2SessionArray:
      description: An array of sessions.
      type: array
      items:
        $ref: '#/components/schemas/V2Session'
    V3SessionDataCollection:
      description: A collection of session data.
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/V3SessionData'
        next:
          $ref: '#/components/schemas/V3NextData'
    V3SessionIdCollection:
      description: A collection of session data.
      type: object
      properties:
        session_ids:
          type: array
          items:
            $ref: '#/components/schemas/V3SessionData'
    ## CONFIGURATIONS ENDPOINT ##
    V2AdditionalInventoryLayer:
      description: |
        An inventory reference to include in a set of configurations.
      type: object
      properties:
        name:
          type: string
          description: The name of the inventory layer.
          example: sample-inventory
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://vcs.domain/vcs/org/inventory.git
          pattern: '^[^\s;]*$'
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The repository branch to use. This will automatically set `commit` to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
      required: [cloneUrl]
      additionalProperties: false
    V3AdditionalInventoryLayer:
      description: |
        An inventory reference to include in a set of configurations.
      type: object
      properties:
        name:
          type: string
          description: The name of the inventory layer.
          example: sample-inventory
          minLength: 1
          maxLength: 45
        clone_url:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://vcs.domain/vcs/org/inventory.git
          pattern: '^[^\s;]*$'
        source:
          type: string
          description: A CFS source with directions to the configuration content repository
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The repository branch to use. This will automatically set `commit` to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
      required: [clone_url]
      additionalProperties: false
    V2ConfigurationLayer:
      description: |
        A single desired configuration state for a component.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration layer.
          example: sample-config
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
          pattern: '^[^\s;]*$'
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
          pattern: '^[^\s;]*$'
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The configuration branch to use.  This will automatically set commit to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
        specialParameters:
          type: object
          description: |
            Optional parameters that do not affect the configuration content or are only used in
            special circumstances.
          properties:
            imsRequireDkms:
              type: boolean
              description: |
                If true, any image customization sessions that use this configuration will enable DKMS in IMS.
          additionalProperties: false
      required: [cloneUrl]
      additionalProperties: false
    V3ConfigurationLayer:
      description: |
        A single desired configuration state for a component.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration layer.
          example: sample-config
          minLength: 1
          maxLength: 45
        clone_url:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
          pattern: '^[^\s;]*$'
        source:
          type: string
          description: A CFS source with directions to the configuration content repository
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
          pattern: '^[^\s;]*$'
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The configuration branch to use.  This will automatically set commit to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
      required: [playbook]
      additionalProperties: false
    V2Configuration:
      description: A collection of ConfigurationLayers.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration.
          example: sample-config
          readOnly: true
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        lastUpdated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        layers:
          type: array
          description: A list of ConfigurationLayer(s).
          items:
            $ref: '#/components/schemas/V2ConfigurationLayer'
        additional_inventory:
          $ref: '#/components/schemas/V2AdditionalInventoryLayer'
      additionalProperties: false
    V3ConfigurationData:
      description: A collection of ConfigurationLayers.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration.
          example: sample-config
          readOnly: true
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        layers:
          type: array
          description: A list of ConfigurationLayer(s).
          items:
            $ref: '#/components/schemas/V3ConfigurationLayer'
        additional_inventory:
          $ref: '#/components/schemas/V3AdditionalInventoryLayer'
      additionalProperties: false
    V2ConfigurationArray:
      description: An array of configurations.
      type: array
      items:
        $ref: '#/components/schemas/V2Configuration'
    V3ConfigurationDataCollection:
      description: A collection of configuration data.
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/V3ConfigurationData'
        next:
          $ref: '#/components/schemas/V3NextData'
    ## COMPONENTS ENDPOINT ##
    V2ComponentsFilter:
      description: Information for patching multiple components.
      type: object
      properties:
        ids:
          type: string
          description: A comma-separated list of component IDs
        status:
          type: string
          description: All components with this status will be patched.
          enum: ['unconfigured', 'pending', 'failed', 'configured']
        enabled:
          type: boolean
          description: Patches all components with the given "enabled" state.
        configName:
          type: string
          description: A configuration name.  All components with this configuration set will be patched.
        tags:
          type: string
          description: Patches all components with the given tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be patched.
    V3ComponentsFilter:
      description: Information for patching multiple components.
      type: object
      properties:
        ids:
          type: string
          description: A comma-separated list of component IDs
        status:
          type: string
          description: All components with this status will be patched.
          enum: ['unconfigured', 'pending', 'failed', 'configured', '']
        enabled:
          type: boolean
          description: Patches all components with the given "enabled" state.
        config_name:
          type: string
          description: A configuration name.  All components with this configuration set will be patched.
        tags:
          type: string
          description: Patches all components with the given tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be patched.
    V2ConfigurationStateLayer:
      description: |
        The current configuration state for a component.
      type: object
      properties:
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
        lastUpdated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        sessionName:
          type: string
          description: The name of the CFS session that last configured the component.
      additionalProperties: false
    V3ConfigurationStateLayer:
      description: |
        The current configuration state for a component.
      type: object
      properties:
        clone_url:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
        status:
          type: string
          description: The status of the configuration layer.
          enum: ['applied', 'failed', 'skipped']
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        session_name:
          type: string
          description: The name of the CFS session that last configured the component.
      additionalProperties: false
    V2ComponentState:
      description: |
        The configuration state and desired state for a component.
      type: object
      properties:
        id:
          type: string
          description: The component's id. e.g. xname for hardware components
        state:
          type: array
          items:
            $ref: '#/components/schemas/V2ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
        stateAppend:
          $ref: '#/components/schemas/V2ConfigurationStateLayer'
          description: A single state that will be appended to the list of current states.
          writeOnly: true
        desiredConfig:
          type: string
          description: A reference to a configuration
        desiredState:
          type: array
          items:
            $ref: '#/components/schemas/V2ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
          readOnly: true
        errorCount:
          type: integer
          description: The count of failed configuration attempts.
        retryPolicy:
          type: integer
          description: The maximum number retries per component when configuration fails.
        enabled:
          type: boolean
          description: A flag indicating if the component should be scheduled for configuration.
        configurationStatus:
          type: string
          description: A summary of the component's configuration state.
          enum: ['unconfigured', 'pending', 'failed', 'configured', ]
          readOnly: true
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the component,
            such as information about the component owner.
          additionalProperties:
            type: string
      additionalProperties: false
    V3ComponentData:
      description: |
        The configuration state and desired state for a component.
      type: object
      properties:
        id:
          type: string
          description: The component's id. e.g. xname for hardware components
        state:
          type: array
          items:
            $ref: '#/components/schemas/V3ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
        state_append:
          $ref: '#/components/schemas/V3ConfigurationStateLayer'
          description: A single state that will be appended to the list of current states.
          writeOnly: true
        desired_config:
          type: string
          description: A reference to a configuration
          minLength: 0
          maxLength: 60
        desired_state:
          type: array
          items:
            $ref: '#/components/schemas/V3ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
          readOnly: true
        error_count:
          type: integer
          description: The count of failed configuration attempts.
        retry_policy:
          type: integer
          description: The maximum number retries per component when configuration fails.
        enabled:
          type: boolean
          description: A flag indicating if the component should be scheduled for configuration.
        configuration_status:
          type: string
          description: A summary of the component's configuration state.
          enum: ['unconfigured', 'pending', 'failed', 'configured', ]
          readOnly: true
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the component,
            such as information about the component owner.
          additionalProperties:
            type: string
        logs:
          type: string
          description: The link to the ARA UI with logs for this component
          readOnly: true
      additionalProperties: false
    V2ComponentStateArray:
      description: An array of component configurations.
      type: array
      items:
        $ref: '#/components/schemas/V2ComponentState'
    V3ComponentDataArray:
      description: An array of component configurations.
      type: array
      items:
        $ref: '#/components/schemas/V3ComponentData'
    V3ComponentDataCollection:
      description: A collection of component data.
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/V3ComponentData'
        next:
          $ref: '#/components/schemas/V3NextData'
    V3ComponentIdCollection:
      description: A collection of component ids.
      type: object
      properties:
        component_ids:
          type: array
          items:
            type: string
    V2ComponentsUpdate:
      description: Information for patching multiple components.
      type: object
      properties:
        patch:
          $ref: '#/components/schemas/V2ComponentState'
        filters:
          $ref: '#/components/schemas/V2ComponentsFilter'
      required: [patch, filters]
    V3ComponentsUpdate:
      description: Information for patching multiple components.
      type: object
      properties:
        patch:
          $ref: '#/components/schemas/V3ComponentData'
        filters:
          $ref: '#/components/schemas/V3ComponentsFilter'
      required: [patch, filters]
    ## SOURCES ENDPOINT ##
    V3SourceCredentials:
      description: Information for retrieving the git credentials
      type: object
      properties:
        authentication_method:
          type: string
          description: The git authentication method used.
          enum:
            - password
#            - token
#            - key
        secret_name:
          type: string
          description: The name of the credentials vault secret.
          readOnly: true
        username:
          type: string
          description: The username for authenticating to git
          writeOnly: true
        password:
          type: string
          description: The password for authenticating to git
          writeOnly: true
      additionalProperties: false
    V3SourceCert:
      description: CA certificate info for retrieving the git credentials
      type: object
      properties:
        configmap_name:
          type: string
          description: The name of the configmap containing a necessary CA cert.
          minLength: 1
        configmap_namespace:
          type: string
          description: The namespace of the CA cert configmap in kubernetes.
      additionalProperties: false
      required:
        - configmap_name
    V3SourceData:
      description: Information for retrieving git content from a source.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration.  This field is optional and will default to the clone_url if not specified.
          example: sample-config
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        last_updated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        clone_url:
          type: string
          description: The url to access the git content
        credentials:
          $ref: '#/components/schemas/V3SourceCredentials'
          description: Information on a secret containing the username and password for accessing the git content
        ca_cert:
          $ref: '#/components/schemas/V3SourceCert'
          description: Information on a configmap containing a CA certificate for authenticating to git
          nullable: true
      additionalProperties: false
    V3SourceDataCollection:
      description: A collection of source data.
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/V3SourceData'
        next:
          $ref: '#/components/schemas/V3NextData'
    V3SourceCreateCredentials:
      description: Information for retrieving the git credentials
      type: object
      properties:
        authentication_method:
          type: string
          description: The git authentication method used.
          enum:
            - password
          default: password
        username:
          type: string
          description: The username for authenticating to git
          writeOnly: true
        password:
          type: string
          description: The password for authenticating to git
          writeOnly: true
      additionalProperties: false
      required:
        - username
        - password
    V3SourceCreateData:
      description: Information for retrieving git content from a source.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration.  This field is optional and will default to the clone_url if not specified.
          example: sample-config
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        clone_url:
          type: string
          description: The url to access the git content
        credentials:
          $ref: '#/components/schemas/V3SourceCreateCredentials'
          description: Information on a secret containing the username and password for accessing the git content
        ca_cert:
          $ref: '#/components/schemas/V3SourceCert'
          description: Information on a configmap containing a CA certificate for authenticating to git
          nullable: true
      additionalProperties: false
      required:
        - clone_url
        - credentials
    V3SourceUpdateData:
      description: Information for retrieving git content from a source.
      type: object
      properties:
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        clone_url:
          type: string
          description: The url to access the git content
        credentials:
          $ref: '#/components/schemas/V3SourceCredentials'
          description: Information on a secret containing the username and password for accessing the git content
        ca_cert:
          $ref: '#/components/schemas/V3SourceCert'
          description: Information on a configmap containing a CA certificate for authenticating to git
          nullable: true
      additionalProperties: false
    ## OTHER ##
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        type:
          description:
            Relative URI reference to the type of problem which includes human
            readable documentation.
          type: string
          format: uri
          default: "about:blank"
        title:
          description:
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        status:
          description: HTTP status code
          type: integer
          example: 400
        instance:
          description: A relative URI reference that identifies the specific
            occurrence of the problem
          format: uri
          type: string
        detail:
          description:
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string

paths:
  /:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_version
      responses:
        200:
          $ref: '#/components/responses/Version'
  /versions:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_versions
      responses:
        200:
          $ref: '#/components/responses/Version'
  /healthz:
    get:
      summary: Get service health details
      tags:
        - healthz
      x-openapi-router-controller: cray.cfs.api.controllers.healthz
      operationId: get_healthz
      description: Get cfs-api health details.
      responses:
        200:
          $ref: '#/components/responses/Healthz'
        503:
          $ref: '#/components/responses/Healthz'
  # V2 #
  /v2:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_versions_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
  /v2/options:
    get:
      summary: Retrieve the configuration service options
      tags:
        - options
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.options
      description: Retrieve the list of configuration service options.
      operationId: get_options_v2
      responses:
        200:
          $ref: '#/components/responses/V2Options'
    patch:
      summary: Update configuration service options
      tags:
        - options
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.options
      operationId: patch_options_v2
      description: Update one or more of the configuration service options.
      requestBody:
        $ref: '#/components/requestBodies/V2OptionsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2Options'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions:
    get:
      summary: Retrieve configuration framework sessions
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      description:
        Retrieve all the configuration framework sessions on the system.
      operationId: get_sessions_v2
      parameters:
        - name: age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
            DEPRECATED: This field has been replaced by min_age and max_age
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete']
          in: query
          description: >-
            Return only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown']
          in: query
          description: >-
            Return only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: create_session_v2
      description:
        Create a new configuration session. A configuration session stages Ansible inventory,
        launches one or more Ansible Execution Environments (AEE) as containers in the management
        services infrastructure, and tears down the environments as required. When a session is
        targeted for image customization, the inventory staging involves using IMS to expose the requested
        image roots, tearing down the image roots, and generating new boot artifacts afterwards.
        The session will checkout the prescribed branch or commit of the configuration repository
        and populate the configuration manifest to the AEE. The Ansible execution begins with an
        inventory prescribed by the user through CFS. A configuration session also tracks the
        status of the different stages of the operation and reports information on
        the success of its execution.
      requestBody:
        $ref: '#/components/requestBodies/V2SessionCreateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/ConflictingSessionName'
    delete:
      summary: Delete multiple configuration framework sessions
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_sessions_v2
      parameters:
        - name: age
          schema:
            type: string
          in: query
          description: >-
            Deletes only sessions older than the given age.  Age is given in the format "1d" or "6h"
            DEPRECATED: This field has been replaced by min_age and max_age
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete']
            default: complete
          in: query
          description: >-
            Deletes only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Delete only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown']
          in: query
          description: >-
            Delete only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be deleted.
      description:
        Delete multiple configuration sessions.  If filters are provided, only sessions matching
        all filters will be deleted.  By default only completed sessions will be deleted.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions/{session_name}:
    get:
      summary: Retrieve a configuration framework session by session_name
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: get_session_v2
      description: >-
        View details about a specific configuration session. This allows you to
        track the status of the session and the Ansible execution through the session.
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: patch_session_v2
      description: >-
        Update the status of an existing configuration framework session
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_session_v2
      description: >-
        Deleting a configuration session deletes the Kubernetes objects associated
        with the session and also deletes the session history. The operation cannot be undone.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_name
        in: path
        description: Config Framework Session name
        required: true
        schema:
          type: string
  /v2/components:
    get:
      summary: Retrieve the state of a collection of components
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: >-
        Retrieve the full collection of components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: get_components_v2
      parameters:
        - name: ids
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given id
            (e.g. xname for hardware components). Can be chained
            for selecting groups of components.
        - name: status
          schema:
            type: string
            enum:
              - unconfigured
              - failed
              - pending
              - configured
          in: query
          description: >-
            Retrieve the components with the status. Multiple statuses can be specified
            in a comma-separated list.
        - name: enabled
          schema:
            type: boolean
          in: query
          description: >-
            Retrieve the components with the "enabled" state.
        - name: configName
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given configuration set as the desired state.
        - name: configDetails
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only components whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Add or Replace a collection of components
      tags:
        - components
        - v2
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: put_components_v2
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a collection of components
      tags:
        - components
        - v2
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: patch_components_v2
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/components/{component_id}:
    get:
      summary: Retrieve the state of a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Retrieve the configuration and current state of a single component
      operationId: get_component_v2
      parameters:
        - name: configDetails
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: put_component_v2
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: patch_component_v2
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - components
        - v2
        - cli_ignore
      summary: Delete a single component
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Delete the given component
      operationId: delete_component_v2
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: component_id
        in: path
        description: Component id. e.g. xname for hardware components
        required: true
        schema:
          type: string
  /v2/configurations:
    get:
      summary: Retrieve a collection of configurations
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: >-
        Retrieve the full collection of configurations in the form of a
        ConfigurationArray.
      operationId: get_configurations_v2
      parameters:
        - name: in_use
          schema:
            type: boolean
          in: query
          description: >-
            Query for only configurations that are currently referenced by components.
      responses:
        200:
          $ref: '#/components/responses/V2ConfigurationDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/configurations/{configuration_id}:
    get:
      summary: Retrieve a single configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Retrieve the given configuration
      operationId: get_configuration_v2
      responses:
        200:
          $ref: '#/components/responses/V2ConfigurationDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Add a configuration to CFS or replace an existing configuration.
      operationId: put_configuration_v2
      requestBody:
        $ref: '#/components/requestBodies/V2ConfigurationUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ConfigurationDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update the commits for a configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Updates the commits for all layers that specify a branch
      operationId: patch_configuration_v2
      responses:
        200:
          $ref: '#/components/responses/V2ConfigurationDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - configurations
        - v2
      summary: Delete a single configuration
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description:  >-
        Delete the given configuration. This will fail in any components are using
        the specified configuration.
      operationId: delete_configuration_v2
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: configuration_id
        in: path
        description: Name of the target configuration
        required: true
        schema:
          type: string
  /v3:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_versions_v3
      responses:
        200:
          $ref: '#/components/responses/Version'
  /v3/options:
    get:
      summary: Retrieve the configuration service options
      tags:
        - options
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.options
      description: Retrieve the list of configuration service options.
      operationId: get_options_v3
      responses:
        200:
          $ref: '#/components/responses/V3Options'
    patch:
      summary: Update configuration service options
      tags:
        - options
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.options
      operationId: patch_options_v3
      description: Update one or more of the configuration service options.
      requestBody:
        $ref: '#/components/requestBodies/V3OptionsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3Options'
        400:
          $ref: '#/components/responses/BadRequest'
  /v3/sessions:
    get:
      summary: Retrieve configuration framework sessions
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      description:
        Retrieve all the configuration framework sessions on the system.
      operationId: get_sessions_v3
      parameters:
        - name: limit
          schema:
            type: integer
            minimum: 1
          in: query
          description: >-
            When set, CFS will only return a number of sessions up to this limit.  Combined with after_id, this
            enables paging across results
        - name: after_id
          schema:
            type: string
          in: query
          description: >-
            When set, CFS will only return the sessions after the session specified.  Combined with limit, this
            enables paging across results.
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete', '']
          in: query
          description: >-
            Return only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown', '']
          in: query
          description: >-
            Return only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V3SessionDataCollection'
        400:
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create a configuration framework session
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: create_session_v3
      description:
        Create a new configuration session. A configuration session stages Ansible inventory,
        launches one or more Ansible Execution Environments (AEE) as containers in the management
        services infrastructure, and tears down the environments as required. When a session is
        targeted for image customization, the inventory staging involves using IMS to expose the requested
        image roots, tearing down the image roots, and generating new boot artifacts afterwards.
        The session will checkout the prescribed branch or commit of the configuration repository
        and populate the configuration manifest to the AEE. The Ansible execution begins with an
        inventory prescribed by the user through CFS. A configuration session also tracks the
        status of the different stages of the operation and reports information on
        the success of its execution.
      requestBody:
        $ref: '#/components/requestBodies/V3SessionCreateRequest'
      responses:
        201:
          $ref: '#/components/responses/V3SessionData'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/ConflictingSessionName'
    delete:
      summary: Delete multiple configuration framework sessions
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_sessions_v3
      parameters:
        - name: min_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions older than the given age.  Age is given in the format "1d" or "6h"
        - name: max_age
          schema:
            type: string
          in: query
          description: >-
            Return only sessions younger than the given age.  Age is given in the format "1d" or "6h"
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete', '']
            default: complete
          in: query
          description: >-
            Deletes only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Delete only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown', '']
          in: query
          description: >-
            Delete only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be deleted.
      description:
        Delete multiple configuration sessions.  If filters are provided, only sessions matching
        all filters will be deleted.  By default only completed sessions will be deleted.
      responses:
        200:
          $ref: '#/components/responses/V3SessionIdCollection'
        400:
          $ref: '#/components/responses/BadRequest'
  /v3/sessions/{session_name}:
    get:
      summary: Retrieve a configuration framework session by session_name
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: get_session_v3
      description: >-
        View details about a specific configuration session. This allows you to
        track the status of the session and the Ansible execution through the session.
      responses:
        200:
          $ref: '#/components/responses/V3SessionData'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update a configuration framework session
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: patch_session_v3
      description: >-
        Update the status of an existing configuration framework session
      responses:
        200:
          $ref: '#/components/responses/V3SessionData'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a configuration framework session
      tags:
        - sessions
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_session_v3
      description: >-
        Deleting a configuration session deletes the Kubernetes objects associated
        with the session and also deletes the session history. The operation cannot be undone.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_name
        in: path
        description: Config Framework Session name
        required: true
        schema:
          type: string
  /v3/components:
    get:
      summary: Retrieve the state of a collection of components
      tags:
        - components
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: >-
        Retrieve the full collection of components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: get_components_v3
      parameters:
        - name: limit
          schema:
            type: integer
            minimum: 1
          in: query
          description: >-
            When set, CFS will only return a number of components up to this limit.  Combined with after_id, this
            enables paging across results
        - name: after_id
          schema:
            type: string
          in: query
          description: >-
            When set, CFS will only return the components after the component specified.  Combined with limit, this
            enables paging across results.
        - name: ids
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given id
            (e.g. xname for hardware components). Can be chained
            for selecting groups of components.
        - name: status
          schema:
            type: string
            enum:
              - unconfigured
              - failed
              - pending
              - configured
              - ""
          in: query
          description: >-
            Retrieve the components with the status. Multiple statuses can be specified
            in a comma-separated list.
        - name: enabled
          schema:
            type: boolean
          in: query
          description: >-
            Retrieve the components with the "enabled" state.
        - name: config_name
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given configuration set as the desired state.
        - name: state_details
          schema:
            type: boolean
          in: query
          description: >-
            Include the details on the currently applied layers
        - name: config_details
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only components whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V3ComponentDataCollection'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Add or Replace a collection of components
      tags:
        - components
        - v3
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: put_components_v3
      requestBody:
        $ref: '#/components/requestBodies/V3ComponentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3ComponentIdCollection'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a collection of components
      tags:
        - components
        - v3
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: patch_components_v3
      requestBody:
        $ref: '#/components/requestBodies/V3ComponentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3ComponentIdCollection'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v3/components/{component_id}:
    get:
      summary: Retrieve the state of a single component
      tags:
        - components
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Retrieve the configuration and current state of a single component
      operationId: get_component_v3
      parameters:
        - name: state_details
          schema:
            type: boolean
          in: query
          description: >-
            Include the details on the currently applied layers
        - name: config_details
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
      responses:
        200:
          $ref: '#/components/responses/V3ComponentData'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single component
      tags:
        - components
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: put_component_v3
      requestBody:
        $ref: '#/components/requestBodies/V3ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3ComponentData'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a single component
      tags:
        - components
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: patch_component_v3
      requestBody:
        $ref: '#/components/requestBodies/V3ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3ComponentData'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - components
        - v3
        - cli_ignore
      summary: Delete a single component
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Delete the given component
      operationId: delete_component_v3
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: component_id
        in: path
        description: Component id. e.g. xname for hardware components
        required: true
        schema:
          type: string
  /v3/configurations:
    get:
      summary: Retrieve a collection of configurations
      tags:
        - configurations
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: >-
        Retrieve the full collection of configurations in the form of a
        ConfigurationArray.
      operationId: get_configurations_v3
      parameters:
        - name: limit
          schema:
            type: integer
            minimum: 1
          in: query
          description: >-
            When set, CFS will only return a number of configurations up to this limit.  Combined with after_id, this
            enables paging across results
        - name: after_id
          schema:
            type: string
          in: query
          description: >-
            When set, CFS will only return the configurations after the configuration specified.  Combined with limit, this
            enables paging across results.
        - name: in_use
          schema:
            type: boolean
          in: query
          description: >-
            Query for only configurations that are currently referenced by components.
      responses:
        200:
          $ref: '#/components/responses/V3ConfigurationDataCollection'
        400:
          $ref: '#/components/responses/BadRequest'
  /v3/configurations/{configuration_id}:
    get:
      summary: Retrieve a single configuration
      tags:
        - configurations
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Retrieve the given configuration
      operationId: get_configuration_v3
      responses:
        200:
          $ref: '#/components/responses/V3ConfigurationData'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single configuration
      tags:
        - configurations
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Add a configuration to CFS or replace an existing configuration.
      operationId: put_configuration_v3
      requestBody:
        $ref: '#/components/requestBodies/V3ConfigurationUpdateRequest'
      parameters:
        - name: drop_branches
          schema:
            type: boolean
            default: false
          in: query
          description: >-
            Don't store the branches after converting each branch to a commit.
      responses:
        200:
          $ref: '#/components/responses/V3ConfigurationData'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update the commits for a configuration
      tags:
        - configurations
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Updates the commits for all layers that specify a branch
      operationId: patch_configuration_v3
      responses:
        200:
          $ref: '#/components/responses/V3ConfigurationData'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - configurations
        - v3
      summary: Delete a single configuration
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description:  >-
        Delete the given configuration. This will fail in any components are using
        the specified configuration.
      operationId: delete_configuration_v3
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: configuration_id
        in: path
        description: Name of the target configuration
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 60
  /v3/sources:
    get:
      summary: Retrieve a collection of sources
      tags:
        - sources
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sources
      description: >-
        Retrieve the full collection of sources in the form of a
        SourceArray.
      operationId: get_sources_v3
      parameters:
        - name: limit
          schema:
            type: integer
            minimum: 1
          in: query
          description: >-
            When set, CFS will only return a number of sources up to this limit.  Combined with after_id, this
            enables paging across results
        - name: after_id
          schema:
            type: string
          in: query
          description: >-
            When set, CFS will only return the configurations after the source specified.  Combined with limit, this
            enables paging across results.
        - name: in_use
          schema:
            type: boolean
          in: query
          description: >-
            Query for only sources that are currently referenced by configurations.
      responses:
        200:
          $ref: '#/components/responses/V3SourceDataCollection'
        400:
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Add a single source
      tags:
        - sources
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sources
      description: Add a source to CFS
      operationId: post_source_v3
      requestBody:
        $ref: '#/components/requestBodies/V3SourceCreateRequest'
      responses:
        201:
          $ref: '#/components/responses/V3SourceData'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/ConflictingSourceName'
  /v3/sources/{source_id}:
    get:
      summary: Retrieve a single source
      tags:
        - sources
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sources
      description: Retrieve the given source
      operationId: get_source_v3
      responses:
        200:
          $ref: '#/components/responses/V3SourceData'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update the commits for a source
      tags:
        - sources
        - v3
      x-openapi-router-controller: cray.cfs.api.controllers.sources
      description: Updates a CFS source
      operationId: patch_source_v3
      requestBody:
        $ref: '#/components/requestBodies/V3SourceUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V3SourceData'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - sources
        - v3
      summary: Delete a single source
      x-openapi-router-controller: cray.cfs.api.controllers.sources
      description:  >-
        Delete the given source. This will fail in any components are using
        the specified source.
      operationId: delete_source_v3
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: source_id
        in: path
        description: Name of the target source
        required: true
        schema:
          type: string
          minLength: 1
