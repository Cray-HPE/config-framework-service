#
# MIT License
#
# (C) Copyright 2020-2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
openapi: "3.0.2"

info:
  title: "Configuration Framework Service"
  version: "0000.0000.0000"
  description: >
    The Configuration Framework Service (CFS) manages the launch of Ansible Execution Environments
    for image customization, node personalization, and node reconfiguration. CFS manages
    the Ansible staging container that pulls Ansible play/role content and inventory (optional)
    from the git server and launches the Ansible Execution Environment.


    CFS includes the following components:

      * CFS REST API
      * A Kubernetes operator running on the management services infrastructure to handle
      the lifecycle and reporting of configuration sessions.
      * Pre-packaged Ansible Execution Environment(s) (AEE) with values tuned for performant
      configuration for executing Ansible playbooks against Cray compute and user access nodes.


    CFS uses a Git version control server running in the management services infrastructure
    for management of the configuration manifest lifecycle.


      The CFS API allows an administrator to customize the compute and user access nodes
      in the following ways:
    * Customize the bootable images prior to their use on the system. This process is called
      image customization. CFS uses IMS to stage images in an ssh container and then modifies
      one or more images using Ansible.

    * Customize live nodes during boot or post-boot. This process is called node personalization.
      Node personalization involves applying software and/or configuration that differentiates
      a node or a group of nodes from all other groups of nodes.
      This should be used in scenarios where configuration cannot be applied prior to booting
      a node. It is typically best to make changes pre-boot via image customization. This ensures
      Ansible only has to run once against an image, rather than against every individual booted node.
      The BOS and IMS APIs support CFS to customize live nodes during boot time.

    ## Resources

    /healthz - Check service health


    /options - Updates service options.


    /sessions - Create, retrieve, or delete configuration sessions.


    /components - Add, update, retrieve, or delete component information.


    /configurations - Add, update, retrieve or delete desired configuration states. (v2 api only)

    ## Workflows

    ### Image Customization

     #### GET /images

     Identify the IMS image that you want to customize. Note the id of the image that you want to customize.

     #### POST /sessions

     Create a configuration session and push the configuration to the specific image in IMS.
     You must specify the target definition as image and provide id of the image that you want to customize.
     This step customizes the image as per Ansible playbook and saves the image in the IMS.


    ### Node Personalization

     #### POST /sessions
     Create a configuration framework session to push configuration to nodes that have already
     been booted, specifying the target (optional), the git repository location, inventory (optional),
     and gives the session a unique name.

     #### GET /sessions/{session_name}
     View details and status for the specific session_name.

     #### DELETE /sessions/{session_name}
     Delete all session history for session_name (as needed).

    The default content type for the CFS API is `application/json`. Unsuccessful
    API calls return a content type of `application/problem+json` as per RFC 7807.

servers:
- url: https://api-gw-service-nmn.local/apis/cfs
  description: The production CFS API server

components:
  requestBodies:
    V2SessionCreateRequest:
      description: A JSON object for creating Config Framework Sessions
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionCreate'
    V2OptionsUpdateRequest:
      description: Service-wide configuration options
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V2ComponentsCreateRequest:
      description: The configuration/state for an array of components
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentStateArray'
    V2ComponentsUpdateRequest:
      description: The configuration/state for an array of components
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V2ComponentsUpdate'
              - $ref: '#/components/schemas/V2ComponentStateArray'
    V2ComponentUpdateRequest:
      description: The configuration/state for a single component
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentState'
    ConfigurationUpdateRequest:
      description: A desired configuration state
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configuration'
  responses:
    # Success
    Version:
      description: Version information for the service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
    Healthz:
      description: Status information for the service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Healthz'
    V2Options:
      description: A collection of service-wide configuration options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V2SessionDetails:
      description: A single configuration session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Session'
    V2SessionDetailsArray:
      description: A collection of configuration sessions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/V2Session'
    V2ComponentDetails:
      description: A single component state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentState'
    V2ComponentDetailsArray:
      description: A collection of component states
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentStateArray'
    ConfigurationDetails:
      description: A single configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Configuration'
    ConfigurationDetailsArray:
      description: A collection of configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConfigurationArray'
    ResourceDeleted:
      description: The resource was deleted.
    # Errors
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ResourceNotFound:
      description: The resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ConflictingSessionName:
      description: A session with the same name already exists.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    Link:
      description: Link to other resources
      type: object
      properties:
        rel:
          type: string
          example: /sessions/session-20190728032600
        href:
          type: string
      additionalProperties: false
    Version:
      description: Version data
      type: object
      properties:
        major:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
          example: '1'
        minor:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
          example: '0'
        patch:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
          example: '10'
      additionalProperties: false
    Healthz:
      description: Service health status
      type: object
      properties:
        dbStatus:
          type: string
        kafkaStatus:
          type: string
      additionalProperties: false
    ## OPTIONS ENDPOINT ##
    V2Options:
      description: |
        Configuration options for the configuration service.
      type: object
      properties:
        hardwareSyncInterval:
          type: integer
          description: How frequently the CFS hardware-sync-agent checks with the Hardware State Manager to update its known hardware (in seconds)
          example: 5
        batcherCheckInterval:
          type: integer
          description: How frequently the batcher checks the configuration states to see if work needs to be done (in seconds)
          example: 5
        batchSize:
          type: integer
          description: The maximum number of nodes the batcher will run a single CFS session against.
          example: 120
        batchWindow:
          type: integer
          description: The maximum number of seconds the batcher will wait to run a CFS session once a node has been detected that needs configuration.
          example: 120
        defaultBatcherRetryPolicy:
          type: integer
          description: The default maximum number retries per node when configuration fails.
          example: 1
        defaultPlaybook:
          type: string
          description: The default playbook to be used if not specified in a node's desired state.
          example: site.yml
          pattern: '^[^\s;]*$'
        defaultAnsibleConfig:
          type: string
          description: The Kubernetes ConfigMap which holds the default ansible.cfg for a given CFS session. This ConfigMap must be present in the same Kubernetes namespace as the CFS service.
          example: cfs-default-ansible-cfg
        sessionTTL:
          type: string
          description: >
            A time-to-live applied to all completed CFS sessions.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
            Set to an empty string to disable.
          example: 24h
        additionalInventoryUrl:
          type: string
          description: >
            The git clone URL of a repo with additional inventory files.  All files in the repo will be copied into the hosts directory of CFS.
          example: https://api-gw-service-nmn.local/vcs/cray/inventory.git
          pattern: '^[^\s;]*$'
        batcherMaxBackoff:
          type: integer
          description: >
            The maximum number of seconds that batcher will backoff from session creation if problems are detected.
          example: 3600
        batcherDisable:
          type: boolean
          description: Disables cfs-batcher's automatic session creation if set to True.
        batcherPendingTimeout:
          type: integer
          description: How long cfs-batcher will wait on a pending session before deleting and recreating it (in seconds).
        loggingLevel:
          type: string
          description: The logging level for core CFS services.  This does not affect the Ansible logging level.
      additionalProperties: false
    TargetSpecSection:
      type: object
      description: >
           A target lets you define the nodes or images that you want to customize and consists
           of two sub-parameters - Definition and groups.
           By default, Configuration Framework Sessions use dynamic inventory definition
           to target hosts. When using a session to customize an image, or if a static inventory
           is required, use this optional section to specify entities (whether images or nodes)
           for the session to target.
      properties:
        definition:
          type: string
          description: |
            Source of inventory definition to be used in the configuration session.

            'image' denotes that the session will target an image root through the Image
            Management Service (IMS). Group members should be a single image identifier known by IMS.

            'spec' denotes inventory that is specified directly via CFS in the target
            groups/members of this object. You can include a node name (a DNS resolvable name),
            or a group name and a list of nodes. The command line inventory can be a quick
            and simple way to run Ansible against a small subset of nodes. However, if more
            customization of the inventory is needed, specifically customization of host and
            groups variables, the repo target definition should be used.

            'repo' denotes the inventory will be used from the git repository
            specified for this session (via `cloneUrl`, and `branch` or `commit`). The inventory
            must be located in the "hosts" file at the root of the repository.

            'dynamic' (default) will use the CFS-provided dynamic inventory plugin to define
            the inventory. The hosts file is automatically generated by CFS with data from
            the Hardware State Manager (HSM), which includes groups and hardware roles.
          enum: ['image', 'spec', 'repo', 'dynamic']
          default: 'dynamic'
          example: spec
        groups:
          type: array
          description: Specification of the groups and group members per the inventory definition. This list is not valid for the 'repo' and 'dynamic' inventory definition types. Multiple groups can be specified for 'image' and 'spec' inventory definition types.
          items:
            type: object
            required: ['name', 'members']
            properties:
              name:
                description: Group name
                example: test-computes
                type: string
              members:
                description: |
                  Group members for the inventory.
                type: array
                example: ['nid000001', 'nid000002', 'nid000003']
                items:
                  type: string
        image_map:
          type: array
          description: |
            Mapping of image IDs to resultant image names.  This is only valid for 'image' inventory definition types.
            Only images that are defined in 'groups' will result in a new image.
            If images in 'groups' are not specified here, CFS will generate a name for the resultant image.
          items:
            type: object
            required: ['source_id', 'result_name']
            properties:
              source_id:
                description: Source image id.  This is the image id that is used in 'groups'.
                example: ff287206-6ff7-4659-92ad-6e732821c6b4
                type: string
              result_name:
                description: Resultant image name.
                example: new-test-image
                type: string
    ## SESSIONS ENDPOINT ##
    V2Session:
      description: |
        An execution session for the Configuration Framework.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configuration:
          type: object
          description: The configuration information which the session will apply
          properties:
            name:
              type: string
              description: The name of the CFS configuration to be applied
              example: example-config
            limit:
              type: string
              description: >-
                A comma seperated list of layers in the configuration to limit the session to.
                This can be either a list of named layers, or a list of indices.
              example: layer1,layer3
        ansible:
          type: object
          description: Additional options that will be used when invoking Ansible.
          properties:
            config:
              type: string
              default: cfs-default-ansible-cfg
              description: >-
                The Kubernetes ConfigMap which holds the ansible.cfg for a given CFS
                session. This ConfigMap must be present in the same Kubernetes namespace as
                the CFS service. If no value is given, the value of the defaultAnsibleConfig
                field in the /options endpoint will be used.
              example: cfs-default-ansible-cfg
            limit:
              type: string
              description: >-
                Additional filtering of hosts or groups from the inventory to run against. This is
                especially useful when running with dynamic inventory and when you want to run on a
                subset of nodes or groups. This option corresponds to ansible-playbook's --limit and
                can be used to specify nodes or groups.
              example: host1
            verbosity:
              type: integer
              default: 0
              minimum: 0
              maximum: 4
              description: >-
                The verbose mode to use in the call to the ansible-playbook command. 1 = -v,
                2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help
                for more information.
            passthrough:
              type: string
              description: >-
                Additional parameters that are added to all Ansible calls for the session. This field is
                currently limited to the following Ansible parameters: "--extra-vars", "--forks",
                "--skip-tags", "--start-at-task", and "--tags". WARNING: Parameters passed to Ansible in
                this way should be used with caution.  State will not be recorded for components when
                using these flags to avoid incorrect reporting of partial playbook runs.
        target:
          $ref: '#/components/schemas/TargetSpecSection'
        status:
          type: object
          description: Status of artifacts, session, and targets. Lists details like session status, session start and completion time, number of successful, failed, or running targets. If the target definition is an image, it also lists the image_id, result_id, and type of image under Artifacts.
          properties:
            artifacts:
              type: array
              items:
                type: object
                properties:
                  image_id:
                    example: "f34ff35e-d782-4a65-a1b8-243a3cd740af"
                    description: The IMS id of the original image to be customized via a configuration session.
                    format: uuid
                    type: string
                  result_id:
                    example: "8b782ccd-8706-4145-a6a1-724e29ed5522"
                    description: The IMS id of the image that was customized via a configuration session. This is the resultant image of the customization.
                    format: uuid
                    type: string
                  type:
                    example: 'ims_customized_image'
                    type: string
                    enum: ['ims_customized_image']
                    default: 'ims_customized_image'
            session:
              type: object
              properties:
                job:
                  description: The name of the configuration execution environment associated with this session.
                  example: cray-cfs-job-session-20190728032600
                  readOnly: true
                  type: string
                completionTime:
                  description: The date/time when the session completed execution in RFC 3339 format.
                  example: '2019-07-28T03:26:00Z'
                  format: date-time
                  readOnly: true
                  type: string
                startTime:
                  description: The date/time when the session started execution in RFC 3339 format.
                  example: '2019-07-28T03:26:00Z'
                  format: date-time
                  readOnly: true
                  type: string
                status:
                  description: The execution status of the session.
                  enum: ['pending', 'running', 'complete']
                  readOnly: true
                  type: string
                succeeded:
                  description: |
                    Whether the session executed successfully or not. A 'none'
                    value denotes that the execution has not completed. This
                    field has context when the `status` field is 'complete'.
                    A session may successfully execute even if the underlying
                    tasks do not.
                  enum: ['none', 'true', 'false', 'unknown']
                  readOnly: true
                  type: string
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
      additionalProperties: false
    V2SessionCreate:
      description: |
        The information required to create a Config Framework Session.
      type: object
      properties:
        name:
          type: string
          description: Name of the session. The length of the name is restricted to 45 characters.
          example: "session-20190728032600"
          # These validation parameters are restricted by Kubernetes naming conventions.
          minLength: 1
          maxLength: 45
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
        configurationName:
          type: string
          description: The name of a CFS configuration to apply
          example: example-config
        configurationLimit:
          type: string
          description: >-
            A comma seperated list of layers in the configuration to limit the session to.
            This can be either a list of named layers, or a list of indices.
          example: layer1,layer3
          default: ""
        ansibleLimit:
          type: string
          description: >-
            Additional filtering of hosts or groups from the inventory to run against. This is
            especially useful when running with dynamic inventory and when you want to run on a
            subset of nodes or groups. This option corresponds to ansible-playbook's --limit and
            can be used to specify nodes or groups.
          example: host1
          pattern: '^[^\s;]*$'
        ansibleConfig:
          type: string
          description: >-
            The Kubernetes ConfigMap which holds the ansible.cfg for a given CFS
            session. This ConfigMap must be present in the same Kubernetes namespace as
            the CFS service. If no value is given, the value of the defaultAnsibleConfig
            field in the /options endpoint will be used.
          example: cfs-default-ansible-cfg
        ansibleVerbosity:
          type: integer
          default: 0
          minimum: 0
          maximum: 4
          description: >-
            The verbose mode to use in the call to the ansible-playbook command. 1 = -v,
            2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help
            for more information.
        ansiblePassthrough:
          type: string
          description: >-
            Additional parameters that are added to all Ansible calls for the session. This field is
            currently limited to the following Ansible parameters: "--extra-vars", "--forks",
            "--skip-tags", "--start-at-task", and "--tags". WARNING: Parameters passed to Ansible in
            this way should be used with caution.  State will not be recorded for components when
            using these flags to avoid incorrect reporting of partial playbook runs.
        target:
          $ref: '#/components/schemas/TargetSpecSection'
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the session,
            such as information about the session creator.
          additionalProperties:
            type: string
      required: [name, configurationName]
      additionalProperties: false
    ## CONFIGURATIONS ENDPOINT ##
    AdditionalInventoryLayer:
      description: |
        An inventory reference to include in a set of configurations.
      type: object
      properties:
        name:
          type: string
          description: The name of the inventory layer.
          example: sample-inventory
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://vcs.domain/vcs/org/inventory.git
          pattern: '^[^\s;]*$'
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The repository branch to use. This will automatically set `commit` to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
      required: [cloneUrl]
      additionalProperties: false
    ConfigurationLayer:
      description: |
        A single desired configuration state for a component.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration layer.
          example: sample-config
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
          pattern: '^[^\s;]*$'
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
          pattern: '^[^\s;]*$'
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
          pattern: '^[a-f0-9]{40}$'
        branch:
          type: string
          description: |
            The configuration branch to use.  This will automatically set commit to master on the branch
            when the configuration is added.
          pattern: '^[^\s;]*$'
      required: [cloneUrl]
      additionalProperties: false
    Configuration:
      description: A collection of ConfigurationLayers.
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration.
          example: sample-config
          readOnly: true
        description:
          type: string
          description: A user-defined description. This field is not used by CFS.
        lastUpdated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        layers:
          type: array
          description: A list of ConfigurationLayer(s).
          items:
            $ref: '#/components/schemas/ConfigurationLayer'
        additional_inventory:
          $ref: '#/components/schemas/AdditionalInventoryLayer'
      additionalProperties: false
    ConfigurationArray:
      description: An array of configurations.
      type: array
      items:
        $ref: '#/components/schemas/Configuration'
    ## COMPONENTS ENDPOINT ##
    # V2 #
    ComponentId:
      type: string
      description: The component's id. e.g. xname for hardware components
      minLength: 1
    ConfigurationStateLayer:
      description: |
        The current configuration state for a component.
      type: object
      properties:
        cloneUrl:
          type: string
          description: The clone URL of the configuration content repository.
          example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
        playbook:
          type: string
          description: The Ansible playbook to run.
          example: site.yml
        commit:
          type: string
          description: The commit hash of the configuration repository when the state is set.
        lastUpdated:
          type: string
          description: The date/time when the state was last updated in RFC 3339 format.
          example: '2019-07-28T03:26:00Z'
          format: date-time
          readOnly: true
        sessionName:
          type: string
          description: The name of the CFS session that last configured the component.
      additionalProperties: false
    V2ComponentState:
      description: |
        The configuration state and desired state for a component.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ComponentId'
        state:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
        stateAppend:
          # Until we move to OAS 3.1, if we want to reference a schema as being read-only or write-only,
          # we have to do it inside the schema definition itself. It cannot be a sibling of a '$ref', because
          # those are ignored.
          type: object
          description: A single state that will be appended to the list of current states.
          properties:
            cloneUrl:
              type: string
              description: The clone URL of the configuration content repository.
              example: https://api-gw-service-nmn.local/vcs/cray/config-management.git
            playbook:
              type: string
              description: The Ansible playbook to run.
              example: site.yml
            commit:
              type: string
              description: The commit hash of the configuration repository when the state is set.
            sessionName:
              type: string
              description: The name of the CFS session that last configured the component.
          additionalProperties: false
          writeOnly: true
        desiredConfig:
          type: string
          description: A reference to a configuration
        desiredState:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationStateLayer'
          description: Information about the desired config and status of the layers
          readOnly: true
        errorCount:
          type: integer
          description: The count of failed configuration attempts.
        retryPolicy:
          type: integer
          description: The maximum number retries per component when configuration fails.
        enabled:
          type: boolean
          description: A flag indicating if the component should be scheduled for configuration.
        configurationStatus:
          type: string
          description: A summary of the component's configuration state.
          enum: ['unconfigured', 'pending', 'failed', 'configured', ]
          readOnly: true
        tags:
          type: object
          description: >-
            A collection of key-value pairs containing descriptive information for the component,
            such as information about the component owner.
          additionalProperties:
            type: string
      additionalProperties: false
    V2ComponentStateArray:
      description: An array of component configurations.
      type: array
      items:
        $ref: '#/components/schemas/V2ComponentState'
    V2ComponentsFilter:
      description: Information for patching multiple components.
      type: object
      properties:
        ids:
          type: string
          description: A comma-separated list of component IDs
        status:
          type: string
          description: All components with this status will be patched.
          enum: ['unconfigured', 'pending', 'failed', 'configured']
        enabled:
          type: boolean
          description: Patches all components with the given "enabled" state.
        configName:
          type: string
          description: A configuration name.  All components with this configuration set will be patched.
        tags:
          type: string
          description: Patches all components with the given tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be patched.
    V2ComponentsUpdate:
      description: Information for patching multiple components.
      type: object
      properties:
        patch:
          $ref: '#/components/schemas/V2ComponentState'
        filters:
          $ref: '#/components/schemas/V2ComponentsFilter'
      required: [patch, filters]
    ## OTHER ##
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        type:
          description:
            Relative URI reference to the type of problem which includes human
            readable documentation.
          type: string
          format: uri
          default: "about:blank"
        title:
          description:
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        status:
          description: HTTP status code
          type: integer
          example: 400
        instance:
          description: A relative URI reference that identifies the specific
            occurrence of the problem
          format: uri
          type: string
        detail:
          description:
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string

paths:
  /:
    get:
      summary: Get CFS service version
      description: Return the CFS service version that is currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_version
      responses:
        200:
          $ref: '#/components/responses/Version'
  /versions:
    get:
      summary: Get CFS service version
      description: Return the CFS service version that is currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_versions
      responses:
        200:
          $ref: '#/components/responses/Version'
  /healthz:
    get:
      summary: Get service health details
      tags:
        - healthz
      x-openapi-router-controller: cray.cfs.api.controllers.healthz
      operationId: get_healthz
      description: Get cfs-api health details.
      responses:
        200:
          $ref: '#/components/responses/Healthz'
        503:
          $ref: '#/components/responses/Healthz'
  # V2 #
  /v2:
    get:
      summary: Get CFS service version
      description: Return the CFS service version that is currently running.
      tags:
        - version
      x-openapi-router-controller: cray.cfs.api.controllers.versions
      operationId: get_versions_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
  /v2/options:
    get:
      summary: Retrieve the configuration service options
      tags:
        - options
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.options
      description: Retrieve the list of configuration service options.
      operationId: get_options
      responses:
        200:
          $ref: '#/components/responses/V2Options'
    patch:
      summary: Update configuration service options
      tags:
        - options
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.options
      operationId: patch_options
      description: Update one or more of the configuration service options.
      requestBody:
        $ref: '#/components/requestBodies/V2OptionsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2Options'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions:
    get:
      summary: Retrieve configuration framework sessions
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      description:
        Retrieve all the configuration framework sessions on the system.
      operationId: get_sessions
      parameters:
        - name: age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Return only sessions older than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
            DEPRECATED: This field has been replaced by min_age and max_age
        - name: min_age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Return only sessions older than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
        - name: max_age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Return only sessions younger than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete']
          in: query
          description: >-
            Return only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown']
          in: query
          description: >-
            Return only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetailsArray'
    post:
      summary: Create a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: create_session
      description:
        Create a new configuration session. A configuration session stages Ansible inventory,
        launches one or more Ansible Execution Environments (AEE) as containers in the management
        services infrastructure, and tears down the environments as required. When a session is
        targeted for image customization, the inventory staging involves using IMS to expose the requested
        image roots, tearing down the image roots, and generating new boot artifacts afterwards.
        The session will checkout the prescribed branch or commit of the configuration repository
        and populate the configuration manifest to the AEE. The Ansible execution begins with an
        inventory prescribed by the user through CFS. A configuration session also tracks the
        status of the different stages of the operation and reports information on
        the success of its execution.
      requestBody:
        $ref: '#/components/requestBodies/V2SessionCreateRequest'
      responses:
        201:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/ConflictingSessionName'
    delete:
      summary: Delete multiple configuration framework sessions
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_sessions
      parameters:
        - name: age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Deletes only sessions older than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
            DEPRECATED: This field has been replaced by min_age and max_age
        - name: min_age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Deletes only sessions older than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
        - name: max_age
          schema:
            type: string
            example: 24h
          in: query
          description: >-
            Deletes only sessions younger than the given age.
            Specified in minutes, hours, days, or weeks. e.g. 3d or 24h.
        - name: status
          schema:
            type: string
            enum: ['pending', 'running', 'complete']
            default: complete
          in: query
          description: >-
            Deletes only sessions with the given status.
        - name: name_contains
          schema:
            type: string
          in: query
          description: >-
            Delete only sessions whose session name contains the given string.
        - name: succeeded
          schema:
            type: string
            enum: ['none', 'true', 'false', 'unknown']
          in: query
          description: >-
            Delete only sessions that have succeeded/failed.
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Deletes only sessions whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list. Only sessions that match all tags will be deleted.
      description:
        Delete multiple configuration sessions.  If filters are provided, only sessions matching
        all filters will be deleted.  By default only completed sessions will be deleted.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions/{session_name}:
    get:
      summary: Retrieve a configuration framework session by session_name
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: get_session
      description: >-
        View details about a specific configuration session. This allows you to
        track the status of the session and the Ansible execution through the session.
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: patch_session
      description: >-
        Update the status of an existing configuration framework session
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a configuration framework session
      tags:
        - sessions
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.sessions
      operationId: delete_session
      description: >-
        Deleting a configuration session deletes the Kubernetes objects associated
        with the session and also deletes the session history. The operation cannot be undone.
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: session_name
        in: path
        description: Config Framework Session name
        required: true
        schema:
          type: string
  /v2/components:
    get:
      summary: Retrieve the state of a collection of components
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: >-
        Retrieve the full collection of components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      operationId: get_components
      parameters:
        - name: ids
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given id
            (e.g. xname for hardware components). Can be chained
            for selecting groups of components.
        - name: status
          schema:
            type: string
            enum:
              - unconfigured
              - failed
              - pending
              - configured
          in: query
          description: >-
            Retrieve the components with the status. Multiple statuses can be specified
            in a comma-separated list.
        - name: enabled
          schema:
            type: boolean
          in: query
          description: >-
            Retrieve the components with the "enabled" state.
        - name: configName
          schema:
            type: string
          in: query
          description: >-
            Retrieve the components with the given configuration set as the desired state.
        - name: configDetails
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
        - name: tags
          schema:
            type: string
          in: query
          description: >-
            Return only components whose have the matching tags.  Key-value pairs should be separated using =,
            and tags can be a comma-separated list.  Only components that match all tags will be returned.
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Add or Replace a collection of components
      tags:
        - components
        - v2
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: put_components
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentsCreateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a collection of components
      tags:
        - components
        - v2
        - cli_ignore
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a collection of components in the cfs database
      operationId: patch_components
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/components/{component_id}:
    get:
      summary: Retrieve the state of a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Retrieve the configuration and current state of a single component
      operationId: get_component
      parameters:
        - name: configDetails
          schema:
            type: boolean
          in: query
          description: >-
            Include the configuration and config status in the response
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: put_component
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a single component
      tags:
        - components
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Update the state for a given component in the cfs database
      operationId: patch_component
      requestBody:
        $ref: '#/components/requestBodies/V2ComponentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2ComponentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      tags:
        - components
        - v2
        - cli_ignore
      summary: Delete a single component
      x-openapi-router-controller: cray.cfs.api.controllers.components
      description: Delete the given component
      operationId: delete_component
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: component_id
        in: path
        description: Component id. e.g. xname for hardware components
        required: true
        schema:
          type: string
  /v2/configurations:
    get:
      summary: Retrieve a collection of configurations
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: >-
        Retrieve the full collection of configurations in the form of a
        ConfigurationArray.
      operationId: get_configurations
      parameters:
        - name: in_use
          schema:
            type: boolean
          in: query
          description: >-
            Query for only configurations that are currently referenced by components.
      responses:
        200:
          $ref: '#/components/responses/ConfigurationDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/configurations/{configuration_id}:
    get:
      summary: Retrieve a single configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Retrieve the given configuration
      operationId: get_configuration
      responses:
        200:
          $ref: '#/components/responses/ConfigurationDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Add a configuration to CFS or replace an existing configuration.
      operationId: put_configuration
      requestBody:
        $ref: '#/components/requestBodies/ConfigurationUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/ConfigurationDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update the commits for a configuration
      tags:
        - configurations
        - v2
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description: Updates the commits for all layers that specify a branch
      operationId: patch_configuration
      responses:
        200:
          $ref: '#/components/responses/ConfigurationDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - configurations
        - v2
      summary: Delete a single configuration
      x-openapi-router-controller: cray.cfs.api.controllers.configurations
      description:  >-
        Delete the given configuration. This will fail in any components are using
        the specified configuration.
      operationId: delete_configuration
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    parameters:
      - name: configuration_id
        in: path
        description: Name of the target configuration
        required: true
        schema:
          type: string
